# Query: render
# ContextLines: 1

17 results - 4 files

soft_engineering_proj/app.js:
  78  app.use((req, res) => {
  79: 	res.status(404).render('404', { title: 'Page Not found!', status: req.user });
  80  });

soft_engineering_proj/controllers/admin.js:
    5  exports.getProductForm = (req, res) => {
    6: 	res.render('add-product', { title: 'Add Product' , status: req.user });
    7  };

    9  exports.getAdminPage = (req, res) => {
   10: 	res.render('admin', { title: 'Admin Page', name: req.user.firstName, status: req.user  });
   11  };

   43  		//res.send(gameArray);
   44: 		//res.render('admin-games', { title: 'Admin game list', products: gameArray });
   45: 		res.render('games-manager', { title: 'Admin game list', products: gameArray, status: req.user });
   46  

   65  	await getGame(req, res);
   66: 	res.render('edit-product', { title: 'Edit', product: res.game , status: req.user  });
   67  });

  143  	}
  144: 	res.render('inventory-admin', { title: game.title, products: game.inventory ,id:game.id ,status: req.user});
  145  

  157  		});
  158: 		res.render('users-list', { title: 'Users list', users: usersArr, status: req.user });
  159  

soft_engineering_proj/controllers/index.js:
  15  	}
  16: 	res.render('store', { title: 'GameStore', products: gameList, status: req.user });
  17  });

  20  	await getGame(req,res);						
  21: 	res.render('game', { title: res.game.title, game: res.game, status: req.user  });
  22  });

  25  	await getGame(req,res);						
  26: 	res.render('payment', { title: 'Payment', game: res.game , status: req.user });
  27  });

  40  	await req.user.save();
  41: 	res.render('payment-confirm', { title: 'Confirm-Payment', game: res.game, status: req.user  });
  42  });

  44  exports.getDashboard = ((req,res)=>{
  45: 	res.render('dashboard',{
  46  		title: 'My profile',
            status: req.user, 

soft_engineering_proj/controllers/users.js:
   7  exports.getLoginPage = ((req,res)=>{
   8: 	res.render('login',{title:'Login', status: req.user});
   9  });
  10  exports.getRegisterPage = ((req,res)=>{
  11: 	res.render('register',{title:'Register', status: req.user});
  12  });

  30  	if (errors.length > 0) {
  31: 		res.render('register', {
  32  			title:'Register',
                status: req.user,
  43  				errors.push({ msg: 'Email already exists' });
  44: 				res.render('register', {
  45  					title:'Register',
                        status: req.user